# This docker-compose.yml file is intended for development support. It
# is *not* meant for production.
# https://www.keycloak.org/server/reverseproxy

version: "3.9"
name: people2023

services:
  atela:
    build: git@github.com:epfl-si/atela-backend.git
    environment:
      - MOCK_ORACLE=1
      - SITE_URL=atela.${DOMAIN:-dev.jkldsa.com}
    profiles:
      - atela
    working_dir: /var/www/vhosts/app/private/tests

  # Keycloak is an OpenID-Connect IdP (Identity Provider) that is easy
  # to set up. It mocks out that feature in the Rails application,
  # allowing testing with arbitrary users and groups. See further
  # details on the startup sequence of Keycloak (and the
  # --import-realm flag) in ./keycloak/README.md
  keycloak:
    profiles:
      - full
    image: quay.io/keycloak/keycloak:25.0.0
    command:
      - start-dev
    environment:
      KC_HOSTNAME: "https://keycloak.dev.jkldsa.com"
      # KC_HOSTNAME_PORT: 443
      KC_HTTP_ENABLED: false
      KC_DB: mariadb
      KC_DB_URL: jdbc:mariadb://mariadb:3306/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: mariadb
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_LOG_LEVEL: INFO #DEBUG
    labels:
      # keycloak
      - traefik.docker.network=traefik
      - traefik.http.services.kc.loadbalancer.server.port=8080
      - traefik.http.routers.kc.rule=Host("keycloak.${DOMAIN:-dev.jkldsa.com}")
      - traefik.http.routers.kc.tls=true
    networks:
      - traefik
      - default

  elements:
    profiles:
      - full
    build:
      context: vendor
      dockerfile: elements.Dockerfile
    profiles:
      - elements
    volumes:
      - ./vendor/elements/assets:/elements/assets
    command: "yarn start"
    labels:
      - traefik.docker.network=traefik
      - traefik.http.services.elements.loadbalancer.server.port=3000
      - traefik.http.routers.elements.rule=Host("elements.${DOMAIN:-dev.jkldsa.com}")
      - traefik.http.routers.elements.tls=true
    networks:
      - traefik
      - default

  mariadb:
    image: mariadb:11.4.3
    environment:
      MARIADB_USER: keycloak
      MARIADB_PASSWORD: mariadb
      MARIADB_ROOT_PASSWORD: mariadb
    # ports:
    #   - "3306:3306"
    volumes:
      - mariadb:/var/lib/mysql
      - ./db/initdb_dev.d:/docker-entrypoint-initdb.d
    networks:
      - default

  # valkey opensource replacement of redis
  # https://hub.docker.com/r/valkey/valkey/
  cache:
    image: valkey/valkey:7.2
    command:
      - --maxmemory 32mb
    networks:
      - default

  webapp:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - RAILS_ENV=development
        - APP_HOME=/srv/app
        - LIB_HOME=/srv/lib
    env_file: .env
    # command:
    #   - ./bin/dev
    command: bin/rails server -p 3000 -b 0.0.0.0
    environment: &webappenv
      KILLPID: ${KILLPID:-no}

      # ------------------------------ deployment-independent mandatory ENV vars
      RAILS_ENV: development
      SUPERUSERS: "${SUPERUSERS}"

      # -------------------------------------------------- with ok default value
      # APP_HOSTNAME: people.epfl.ch
      APP_HOSTNAME: "people.${DOMAIN:-dev.jkldsa.com}"
      # ENABLE_DIRECT_UPLOADS: false
      # HIDE_ENS_ACCREDDS: true
      # INTRANET_RE: '^128\.17[89]'
      # RAILS_LOG_LEVEL: info in prod
      # if REDIS_CACHE is defined then redis is used otherwise default to memory
      # note that in dev cache is enabled only if presence of tmp/caching-dev.txt
      REDIS_CACHE: redis://cache:6379/0
      # SEEDS_PATH: db/seeds/data
      # USE_LOCAL_ELEMENTS: false
      USE_LOCAL_ELEMENTS: true

      # ----------------------------------------------------------- dev specific
      # DEV_SEEDS_PATH: db/seeds_dev/data
      FORCE_AUDIENCE: ${FORCE_AUDIENCE:-4}
      RAILS_DEVELOPMENT_HOSTS: "people.${DOMAIN:-dev.jkldsa.com},api.${DOMAIN:-dev.jkldsa.com}"
      SHOW_ERROR_PAGES: ${SHOW_ERROR_PAGES:-false}

      # ---------------------------------------------------- transition specific
      ENABLE_ADOPTION: true
      LEGACY_RO_URL: ${LEGACY_RO_URL:-https://personnes.epfl.ch}
      LEGACY_RW_URL: ${LEGACY_RW_URL:-https://test-people.epfl.ch}
      # LEGACY_PAGES_CACHE: 2days

      # ----------------------------- read in yml files (will go to config maps)

      # --> epflapi.yml
      ATELA_KEY: ${ATELA_KEY}
      CAMIPRO_PHOTO_KEY: ${CAMIPRO_PHOTO_KEY}
      CAMIPRO_PHOTO_HOST: ${CAMIPRO_PHOTO_HOST:-camipro-photos.epfl.ch}
      ENABLE_API_CACHE: "${ENABLE_API_CACHE:-false}"
      ENABLE_WEBMOCK: "${ENABLE_WEBMOCK:-false}"
      EPFLAPI_BACKEND_URL: ${EPFLAPI_BACKEND_URL:-https://api.epfl.ch/v1}
      EPFLAPI_PASSWORD: ${EPFLAPI_PASSWORD}
      ISA_URL: ${ISA_URL:-https://isa-test.epfl.ch/services}
      OFFLINE_CACHEDIR: "/srv/filecache"

      # --> ollama.yml
      OLLAMA_URL: http://${DOCKER_IP}:11434
      # OLLAMA_URL: http://itsidevfsd0006.epfl.ch

      # OpenAI
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_BASE_URL: https://inference-dev.rcp.epfl.ch/v1

      # --> oidc.yml
      USE_KEYCLOAK: ${USE_KEYCLOAK:-no}
      ENTRA_TENANT_ID: "${DEV_ENTRA_TENANT_ID}"
      ENTRA_CLIENT_ID: "${DEV_ENTRA_CLIENT_ID}"
      ENTRA_SECRET: "${DEV_ENTRA_SECRET}"

    extra_hosts:
      - "api.${DOMAIN:-dev.jkldsa.com}:${DOCKER_IP}"
      - "keycloak.${DOMAIN:-dev.jkldsa.com}:${DOCKER_IP}"
      - "ldap.epfl.ch:128.178.222.15"
    volumes:
      - ./:/srv/app
      - storage:/srv/app/storage
      - filecache:/srv/filecache
    labels:
      # There is no way to do this with labels. :_(
      # - "traefik.http.services.legacypeople.loadbalancer.servers.url=http://dinfo11.epfl.ch/"
      # - "traefik.http.services.legacypeople.headers='Host: people.epfl.ch'"
      # - "traefik.http.routes.legacypeople.rule=Host('people.${DOMAIN:-dev.jkldsa.com}') && PathPrefix('/legacy')"
      # - "traefik.http.routes.legacypeople.service=legacypeople"

      - traefik.docker.network=traefik
      - traefik.http.middlewares.cgibin.replacepathregex.regex=^/cgi-bin/(.*)
      - traefik.http.middlewares.cgibin.replacepathregex.replacement=/api/v0/$$1

      - traefik.http.services.people2.loadbalancer.server.port=${PORT:-3000}
      - traefik.http.routers.people2.rule=Host("people.${DOMAIN:-dev.jkldsa.com}")
      - traefik.http.routers.people2.tls=true
      - traefik.http.routers.people2.middlewares=cgibin

      - traefik.http.middlewares.api.addPrefix.prefix=/fakeapi
      - traefik.http.routers.epflapi.rule=Host("api.${DOMAIN:-dev.jkldsa.com}")
      - traefik.http.routers.epflapi.middlewares=api
      - traefik.http.routers.epflapi.tls=true

      # - traefik.http.routers.peoplengrok.rule=Host("2.tcp.eu.ngrok.io")
      # - traefik.http.routers.peoplengrok.tls=true

    # TODO: remove wen done dev metrics
    ports:
      - "9394:9394"
    networks:
      - traefik
      - default
    tty: true
    stdin_open: true

  jobs:
    image: people2023-webapp
    env_file: .env
    command: ./bin/jobs
    environment: *webappenv
    ports: []
    volumes:
      - ./:/srv/app
      - storage:/srv/app/storage

  prometheus:
    profiles:
      - full
      - monitoring
    image: prom/prometheus:latest
    volumes:
      - ./config/dev-prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus:/prometheus
    labels:
      - traefik.docker.network=traefik
      - traefik.http.routers.peometheus.rule=Host("peometheus.${DOMAIN:-dev.jkldsa.com}")
      - traefik.http.routers.peometheus.tls=true
      - traefik.http.services.peometheus.loadbalancer.server.port=9090
    networks:
      - traefik
      - default

  grafana:
    profiles:
      - full
      - monitoring
    image: grafana/grafana:latest
    volumes:
      - ./ops/roles/people/files/demo-monitoring/grafana:/etc/grafana
      - grafana:/var/lib/grafana
    labels:
      - traefik.docker.network=traefik
      - traefik.http.routers.peofana.rule=Host("peofana.${DOMAIN:-dev.jkldsa.com}")
      - traefik.http.routers.peofana.tls=true
      - traefik.http.services.peofana.loadbalancer.server.port=3000
    networks:
      - traefik
      - default

  # directus:
  #   image: directus/directus:11.0.0
  #   volumes:
  #     - directus_uploads:/directus/uploads
  #     - directus_extensions:/directus/extensions
  #   environment:
  #     PUBLIC_URL: "https://directus.${DOMAIN:-dev.jkldsa.com}"
  #     SECRET: "whatever"
  #     ADMIN_EMAIL: "giovanni.cangiani@epfl.ch"
  #     ADMIN_PASSWORD: "1234"
  #     DB_CLIENT: "mysql"
  #     DB_HOST: mariadb
  #     DB_PORT: 3306
  #     DB_DATABASE: people
  #     DB_USER: people
  #     DB_PASSWORD: mariadb
  #     WEBSOCKETS_ENABLED: "true"
  #     LOG_LEVEL: debug
  #     LOG_STYLE: pretty
  #   labels:
  #     - traefik.docker.network=traefik
  #     - traefik.http.services.directus.loadbalancer.server.port=8055
  #     - traefik.http.routers.directus.rule=Host("directus.${DOMAIN:-dev.jkldsa.com}")
  #     - traefik.http.routers.directus.tls=true
  #   networks:
  #     - traefik
  #     - default

  noc:
    image: ${NOCIMAGE:-jonlabelle/network-tools}
    stdin_open: true
    tty: true
    profiles:
      - noc
    networks:
      - traefik
      - default

  phpmyadmin:
    profiles:
      - full
    image: phpmyadmin/phpmyadmin
    environment:
      - PMA_HOST=mariadb
      - PMA_ABSOLUTE_URI=https://peopledb.${DOMAIN:-dev.jkldsa.com}
      - PMA_ARBITRARY=1
    # volumes:
    #   - ./storage/phpmyadmin_sessions:/sessions
    labels:
      - traefik.docker.network=traefik
      - traefik.http.routers.peodb2.rule=Host("peopledb.${DOMAIN:-dev.jkldsa.com}")
      - traefik.http.routers.peodb2.tls=true
      - traefik.http.services.peodb2.loadbalancer.server.port=80
    networks:
      - traefik
      - default

  # redis-commander:
  #   container_name: redis-commander
  #   hostname: redis-commander
  #   image: rediscommander/redis-commander:latest
  #   restart: always
  #   environment:
  #     - REDIS_HOSTS=cache:6379/0
  #   labels:
  #     - traefik.docker.network=traefik
  #     - traefik.http.routers.peodis.rule=Host("peopledis.${DOMAIN:-dev.jkldsa.com}")
  #     - traefik.http.routers.peodis.tls=true
  #     - traefik.http.services.peodis.loadbalancer.server.port=8081

  # TODO: add also firefox as an option (see https://nicolasiensen.github.io/2022-03-11-running-rails-system-tests-with-docker/)
  # https://github.com/SeleniumHQ/docker-selenium
  selenium:
    profiles:
      - test
      - full
    image: selenium/standalone-chrome:112.0
    shm_size: "2gb"
    profiles:
      - test
    labels:
      - traefik.docker.network=traefik
      - traefik.http.services.peoselen.loadbalancer.server.port=7900
      - traefik.http.routers.peoselen.rule=Host("selenium.${DOMAIN:-dev.jkldsa.com}")
      - traefik.http.routers.peoselen.tls=true
    networks:
      - traefik
      - default

volumes:
  mariadb: {}
  filecache: {}
  storage: {}
  prometheus: {}
  grafana: {}
  # directus_uploads: {}
  # directus_extensions: {}
networks:
  traefik:
    external: true
