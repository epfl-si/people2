# frozen_string_literal: true

class ApplicationController < ActionController::Base
  around_action :switch_locale

  include Authentication

  def self.unique_counter_value
    @indx ||= 0
    @indx += 1
    @indx
  end

  # see https://guides.rubyonrails.org/i18n.html#setting-the-locale-from-url-params
  # this will add the current local to all urls generated by route helpers. It
  # will work also if we use a path scope instead of a query parameter for locale
  def default_url_options
    { lang: I18n.locale }
  end

  def compute_audience(sciper)
    # keepting @audience because Current is not visible from the console thread
    @audience =
      if authenticated?
        if Current.user.sciper == sciper
          AudienceLimitable::OWNER
        else
          AudienceLimitable::AUTENTICATED
        end
      elsif intranet_client?
        AudienceLimitable::INTRANET
      else
        AudienceLimitable::WORLD
      end
    Current.original_audience = @audience
    Current.audience = @audience
    return @audience unless (fe = Rails.configuration.force_audience)

    @audience = [[AudienceLimitable::WORLD, fe.to_i].max, AudienceLimitable::OWNER].min
    Current.audience = @audience
  end

  def current_user
    Current.user
  end

  private

  def load_and_authorize_profile
    @profile ||= Profile.find(params[:profile_id])
    authorize! @profile, to: :update?
  end

  # This is for situation that should not arrive. In case, we want to provide
  # meaningful output in all formats.
  def unexpected(message)
    respond_to do |format|
      format.html do
        render inline: "<p><%= message %></p>", status: :forbidden
      end
      format.turbo_stream do
        flash.now[:error] = message
        render turbo_stream: turbo_stream.replace("flash-messages", partial: "shared/flash")
      end
      format.json { render json: { msg: message }, status: :forbidden }
    end
  end

  # TODO: this is intended for larger notifications than just the flash.
  #       We have to implement a larger dismissable popup box or recycle the
  #       one for editing or an identical one with dismiss button by default.
  def notifier(message)
    respond_to do |format|
      format.html do
        render inline: "<p><%= message %></p>"
      end
      format.turbo_stream do
        flash.now[:info] = message
        render turbo_stream: turbo_stream.replace("flash-messages", partial: "shared/flash")
      end
      format.json { render json: { msg: message } }
    end
  end

  def force_profile_locale(profile = @profile)
    return if profile.blank?

    l = I18n.locale

    tt = profile.translations
    redirect_to url_for(params.permit!.to_h.merge(lang: tt.first)) unless tt.include?(l)
    Current.available_locales = tt
  end

  def switch_locale(&action)
    locale = params[:lang] || locale_from_http_header || request_default_locale || I18n.default_locale
    Current.available_locales = I18n.available_locales
    Current.primary_lang = locale
    Current.fallback_lang = request_default_locale || I18n.default_locale
    Current.gender = nil
    I18n.with_locale(locale, &action)
  end

  def locale_from_http_header
    al = request.env["HTTP_ACCEPT_LANGUAGE"]
    return nil if al.blank?

    l = al.scan(/^[a-z]{2}/).first
    return unless l.present? && I18n.available_locales.include?(l = l.to_sym)

    l
  end

  # override if default locale needs to change (e.g. during profile editing)
  def request_default_locale
    nil
  end

  # TODO: This is not the correct way of finding internal clients. The reliable
  # way is to check if X-EPFL-Internal header is set in the request.
  def intranet_client?
    if headers.key? 'X-EPFL-Internal'
      headers['X-EPFL-Internal'] == "TRUE"
    else
      Rails.configuration.intranet_re.match?(request.remote_ip)
    end
  end
end
